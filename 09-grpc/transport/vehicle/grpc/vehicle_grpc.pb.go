// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: vehicle.proto

package vehiclepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VehicleService_FindAvailableVehicle_FullMethodName = "/vehiclepb.VehicleService/FindAvailableVehicle"
	VehicleService_GetVehicleInfo_FullMethodName       = "/vehiclepb.VehicleService/GetVehicleInfo"
	VehicleService_StreamAssignments_FullMethodName    = "/vehiclepb.VehicleService/StreamAssignments"
)

// VehicleServiceClient is the client API for VehicleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleServiceClient interface {
	FindAvailableVehicle(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	GetVehicleInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	StreamAssignments(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AssignmentRequest, AssignmentAck], error)
}

type vehicleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleServiceClient(cc grpc.ClientConnInterface) VehicleServiceClient {
	return &vehicleServiceClient{cc}
}

func (c *vehicleServiceClient) FindAvailableVehicle(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, VehicleService_FindAvailableVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) GetVehicleInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, VehicleService_GetVehicleInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) StreamAssignments(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AssignmentRequest, AssignmentAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VehicleService_ServiceDesc.Streams[0], VehicleService_StreamAssignments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AssignmentRequest, AssignmentAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VehicleService_StreamAssignmentsClient = grpc.BidiStreamingClient[AssignmentRequest, AssignmentAck]

// VehicleServiceServer is the server API for VehicleService service.
// All implementations must embed UnimplementedVehicleServiceServer
// for forward compatibility.
type VehicleServiceServer interface {
	FindAvailableVehicle(context.Context, *FindRequest) (*FindResponse, error)
	GetVehicleInfo(context.Context, *InfoRequest) (*InfoResponse, error)
	StreamAssignments(grpc.BidiStreamingServer[AssignmentRequest, AssignmentAck]) error
	mustEmbedUnimplementedVehicleServiceServer()
}

// UnimplementedVehicleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVehicleServiceServer struct{}

func (UnimplementedVehicleServiceServer) FindAvailableVehicle(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAvailableVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) GetVehicleInfo(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleInfo not implemented")
}
func (UnimplementedVehicleServiceServer) StreamAssignments(grpc.BidiStreamingServer[AssignmentRequest, AssignmentAck]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAssignments not implemented")
}
func (UnimplementedVehicleServiceServer) mustEmbedUnimplementedVehicleServiceServer() {}
func (UnimplementedVehicleServiceServer) testEmbeddedByValue()                        {}

// UnsafeVehicleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleServiceServer will
// result in compilation errors.
type UnsafeVehicleServiceServer interface {
	mustEmbedUnimplementedVehicleServiceServer()
}

func RegisterVehicleServiceServer(s grpc.ServiceRegistrar, srv VehicleServiceServer) {
	// If the following call pancis, it indicates UnimplementedVehicleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VehicleService_ServiceDesc, srv)
}

func _VehicleService_FindAvailableVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).FindAvailableVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_FindAvailableVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).FindAvailableVehicle(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_GetVehicleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).GetVehicleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleService_GetVehicleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).GetVehicleInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_StreamAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VehicleServiceServer).StreamAssignments(&grpc.GenericServerStream[AssignmentRequest, AssignmentAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VehicleService_StreamAssignmentsServer = grpc.BidiStreamingServer[AssignmentRequest, AssignmentAck]

// VehicleService_ServiceDesc is the grpc.ServiceDesc for VehicleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehicleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vehiclepb.VehicleService",
	HandlerType: (*VehicleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAvailableVehicle",
			Handler:    _VehicleService_FindAvailableVehicle_Handler,
		},
		{
			MethodName: "GetVehicleInfo",
			Handler:    _VehicleService_GetVehicleInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAssignments",
			Handler:       _VehicleService_StreamAssignments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vehicle.proto",
}
