// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all assignments
	// (GET /assignments)
	ListAssignments(c *gin.Context, params ListAssignmentsParams)
	// Create a new assignment
	// (POST /assignments)
	CreateAssignment(c *gin.Context)
	// Get a single assignment
	// (GET /assignments/{id})
	GetAssignment(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListAssignments operation middleware
func (siw *ServerInterfaceWrapper) ListAssignments(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssignmentsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAssignments(c, params)
}

// CreateAssignment operation middleware
func (siw *ServerInterfaceWrapper) CreateAssignment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAssignment(c)
}

// GetAssignment operation middleware
func (siw *ServerInterfaceWrapper) GetAssignment(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAssignment(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/assignments", wrapper.ListAssignments)
	router.POST(options.BaseURL+"/assignments", wrapper.CreateAssignment)
	router.GET(options.BaseURL+"/assignments/:id", wrapper.GetAssignment)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWwY7bNhD9FWLaI2N5m5x0c4o2WGCbBAv0lPrAFUf2BBLJDEcODEP/XpBa25Ktptiu",
	"exOpGc7jm/dGOkDl2+AdOolQHoAxBu8i5sV7Yx/xW4dR0qryTtDlRxNCQ5UR8q74Gr1Le7HaYmvSU2Af",
	"kIWGQyyKoSY/yj4glBCFyW2g14DMnmfe9Pq445++YiXQpy2LsWIKqSqUcO92piGr+Blhr+Gjl9995+wr",
	"0L4G0SNG33GFynlRdQaSgoZS+fRVjLRx7RFX03yqofxygJ8Zayjhp+LcjOI5rfjNCcn+DxRjjRjo9SVk",
	"9p3gvZ0lOIphiatcrvbcGoESrBF8I9Qi6NkM6QYqXNdC+QUCOpteajCV0C5lJZgNClpYzxyxwy1VzTyk",
	"XkNqGDHadPY5VJ/uMUJ9grO+on/da7ig5qqZFaMRtC+5Ps3z2AX7spOu9aLhI36fCuD/7OPtmrCelT65",
	"2g/2Hltg9fle1Z5VZp7cRhmXHCpMuEtLJovKnEiIC/XJVahC99RQ3KLVqiZsbMx5EVvjhKqo2i6KYmwN",
	"ORXFPDW4+MulW5M0CdhjOvbMrVp9vodEAccB1t1iuVgmVnxAZwJBCW8Xy8Vb0BCMbDP9xQhWWm8ws506",
	"lEdHYhIeKMpqFJfy2bQoyDE7mVK5bx3yHjQ40w60Zw3r0dD5j97q13o6oX9ZLl807EiwzYk/mjgjkZ5l",
	"bJjNfm7qJUqUr8ddHcZe17aG98cI0zTTEA3BxxmKf82mHWEYxIpR3nu7f9Ftf3TJqRn7qSeEO+yvqL67",
	"WfHLyhcmOgv5eYKBhi0am0V2gAc/FL2235+PD6kVssVj5ojziQBPQ6RjmpleCdS7QVtz9zgRU4x+EXLK",
	"u39POX2lpyoZ+q6Mcvh9jDpFjb1ZHMj2/2jQDygT6czZM1n+7E6ycNn6MVG3duBNZPH8c/E6wj+gKKMi",
	"uU2DU8JTGPLuSFrHDZSwFQmxLAoTaFGR7N8IGxeDZ1lUvi12d+mb/HcAAAD//zJpvAJPCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
